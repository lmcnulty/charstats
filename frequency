#!/usr/bin/env bash

# Perform calculations more easily. You can use 'x' for multiplication instead
# of '*' if you don't weant to have to use quotes (otherwise bash will expand it
# as a glob). ex) calcu 2 x 5 → 10, calcu '(512 + (19 * 5)) / 2' → 303.5
calcu() { 
	echo "scale=20;$@" | sed -e s/x/*/g | bc | sed '/\./ s/\.\{0,1\}0\{1,\}$//'
}

PARAMS=""
IGNORE=" "

while (( "$#" )); do
  case "$1" in
    -i|--ignore)
      IGNORE=" ""$2"
      shift 2
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
	  shift
      ;;
  esac
done

# set positional arguments in their proper place
eval set -- "$PARAMS"

# Every character on its own Line

# Nevermind: We want to include the IGNOREd characters in the analysis,
# just not in the output.
# all_chars="$(cat "$@" | sed "s/[$IGNORE]//g" | grep -o . | sort )"
all_chars="$(cat "$@" | tr '\n' ' ' | sed 's/ //g' | grep -o . | sort )"

# The total number of characters
all_chars_count=$(echo "$all_chars" | wc -l)

# The total number of occurences of each character
count_table=$(echo "$all_chars" | sed "/[$IGNORE]/d" | uniq -c | sed '/^[[:space:]]*$/d' | sed 's/^[ ]*//g' | tr ' ' ',')

json="{"
for e in $(echo "$count_table" ); do
	num=$(echo "$e" | sed 's/,.*//g')
	char=$(echo "$e" | sed 's/.*,//g')
	rel_frequency=$(calcu "$num" / "$all_chars_count" x 10000000)
	json="$json""\"$char\": [$num, $rel_frequency],"
done
json="$json"'}'
echo $json | sed 's/,}/}/g'


